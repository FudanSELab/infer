name: build cpp

on:
  push:
    branches:
      - dev

jobs:
  build:
    name: Build Infer for C++
    strategy:
      fail-fast: false
      matrix:
        os:
          - macOS-latest
          - ubuntu-latest
        ocaml-compiler:
          - ocaml-variants.4.14.0+options,ocaml-option-flambda
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Required Apt Packages for Ubuntu
        run: |
          sudo apt install clang libmpfr-dev libsqlite3-dev ninja-build
          sudo apt clean
        if: runner.os == 'Linux'

      - name: Install Required Brew Packages for MacOS
        run: brew install automake jq ninja pkg-config lzlib zlib coreutils
        if: runner.os == 'macOS'

      - name: Get OS version
        uses: sersoft-gmbh/os-version-action@v1
        id: os-version

      - name: Force the use of test dependencies
        run: cp opam/infer-tests.opam.locked opam/infer.opam.locked

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - name: Compute hash of clang installation
        id: clang-hash
        run: |
          echo "::set-output name=value::$(./facebook-clang-plugins/clang/setup.sh --clang-hash)"

      - name: Attempt to get clang from the cache
        id: cache-clang
        uses: actions/cache@v2
        with:
          path: facebook-clang-plugins/clang/install
          key: clang-${{ runner.os }}-${{ steps.clang-hash.outputs.value }}

      - name: Record that the clang cache was hit
        if: steps.cache-clang.outputs.cache-hit == 'true'
        run: ./facebook-clang-plugins/clang/setup.sh --only-record-install

      - name: Build clang on cache misses
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          ./facebook-clang-plugins/clang/src/prepare_clang_src.sh
          CC=clang CXX=clang++ ./facebook-clang-plugins/clang/setup.sh --ninja --sequential-link

      - if: runner.os == 'Linux'
        run: ./build-infer.sh clang --yes --user-opam-switch

      - if: runner.os == 'macOS'
        run: ./build-infer.sh clang --yes --user-opam-switch -- --disable-python-analyzers

      - name: Test infer
        run: make test -k NDKBUILD=no

      - run: make install BUILD_MODE=opt
        if: runner.os == 'macOS'

      - run: |
          sudo make install BUILD_MODE=opt
          # restore permissions after root build
          sudo chown $USER: -R .
        if: runner.os == 'Linux'
